const ethers = require("ethers");
const fs = require("fs-extra");
require("dotenv").config();

async function deployManualContract() {
  // console.log("Let's deploy with only transaction data!");
  // const nonce = await wallet.getTransactionCount();
  // const tx = {
  //   nonce: nonce,
  //   gasPrice: 20000000000,
  //   gasLimit: 1000000,
  //   to: null,
  //   value: 0,
  //   data: "0x608060405234801561001057600080fd5b506107a6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632e64cec114610067578063471f7cdf146100855780636057361d146100a35780636f760f41146100bf5780638bab8dd5146100db5780639e7a13ad1461010b575b600080fd5b61006f61013c565b60405161007c919061055f565b60405180910390f35b61008d610145565b60405161009a919061055f565b60405180910390f35b6100bd60048036038101906100b891906104a2565b61014b565b005b6100d960048036038101906100d49190610446565b610155565b005b6100f560048036038101906100f091906103fd565b6101eb565b604051610102919061055f565b60405180910390f35b610125600480360381019061012091906104a2565b610219565b60405161013392919061057a565b60405180910390f35b60008054905090565b60005481565b8060008190555050565b6000604051806040016040528083815260200184815250905060028190806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906101c09291906102d5565b505050816001846040516101d49190610548565b908152602001604051809103902081905550505050565b6001818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6002818154811061022957600080fd5b906000526020600020906002020160009150905080600001549080600101805461025290610673565b80601f016020809104026020016040519081016040528092919081815260200182805461027e90610673565b80156102cb5780601f106102a0576101008083540402835291602001916102cb565b820191906000526020600020905b8154815290600101906020018083116102ae57829003601f168201915b5050505050905082565b8280546102e190610673565b90600052602060002090601f016020900481019282610303576000855561034a565b82601f1061031c57805160ff191683800117855561034a565b8280016001018555821561034a579182015b8281111561034957825182559160200191906001019061032e565b5b509050610357919061035b565b5090565b5b8082111561037457600081600090555060010161035c565b5090565b600061038b610386846105cf565b6105aa565b9050828152602081018484840111156103a7576103a6610739565b5b6103b2848285610631565b509392505050565b600082601f8301126103cf576103ce610734565b5b81356103df848260208601610378565b91505092915050565b6000813590506103f781610759565b92915050565b60006020828403121561041357610412610743565b5b600082013567ffffffffffffffff8111156104315761043061073e565b5b61043d848285016103ba565b91505092915050565b6000806040838503121561045d5761045c610743565b5b600083013567ffffffffffffffff81111561047b5761047a61073e565b5b610487858286016103ba565b9250506020610498858286016103e8565b9150509250929050565b6000602082840312156104b8576104b7610743565b5b60006104c6848285016103e8565b91505092915050565b60006104da82610600565b6104e4818561060b565b93506104f4818560208601610640565b6104fd81610748565b840191505092915050565b600061051382610600565b61051d818561061c565b935061052d818560208601610640565b80840191505092915050565b61054281610627565b82525050565b60006105548284610508565b915081905092915050565b60006020820190506105746000830184610539565b92915050565b600060408201905061058f6000830185610539565b81810360208301526105a181846104cf565b90509392505050565b60006105b46105c5565b90506105c082826106a5565b919050565b6000604051905090565b600067ffffffffffffffff8211156105ea576105e9610705565b5b6105f382610748565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b8381101561065e578082015181840152602081019050610643565b8381111561066d576000848401525b50505050565b6000600282049050600182168061068b57607f821691505b6020821081141561069f5761069e6106d6565b5b50919050565b6106ae82610748565b810181811067ffffffffffffffff821117156106cd576106cc610705565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61076281610627565b811461076d57600080fd5b5056fea2646970667358221220e2e6c7266a6dd9b7ef70cb959798baa60ab20af24c3d9572d3f4db11fda7c4d064736f6c63430008070033",
  //   chainId: 1337,
  // };
  // const sendTxTransaction = await wallet.sendTransaction(tx);
  // await sendTxTransaction.wait(1);
  // console.log(sendTxTransaction);
}

async function main() {
  // http://127.0.0.1:7545
  const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL);
  const privateKey = new ethers.Wallet.fromMnemonic(process.env.MNEMONIC)
    .privateKey; // Sharing this menmonic is fine, it's just locally used for testing
  const wallet = new ethers.Wallet(privateKey, provider);
  const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8");
  const binary = fs.readFileSync(
    "./SimpleStorage_sol_SimpleStorage.bin",
    "utf8"
  );
  const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
  console.log("Deploying contract...");
  const contract = await contractFactory.deploy();
  const deploymentReceipt = await contract.deployTransaction.wait(1); // Number of confirmations to wait for
  console.log(deploymentReceipt);

  // deployManualContract();

  const currentFavoriteNumber = await contract.retrieve();
  console.log(`Current favorite number: ${currentFavoriteNumber.toString()}`);
  const transactionResponse = await contract.store("42");
  const transactionReceipt = await transactionResponse.wait(1);
  const updatedFavoriteNumber = await contract.retrieve();
  console.log(`Updated favorite number: ${updatedFavoriteNumber.toString()}`);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
